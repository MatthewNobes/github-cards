{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CardList","props","profiles","map","profile","Card","this","className","alt","name","src","avatar_url","company","React","Component","Form","state","userName","handleSubmit","event","a","preventDefault","axios","get","response","onSubmit","data","setState","console","log","type","value","onChange","target","placeholder","required","App","addNewProfile","profileData","prevState","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIMA,EAAW,SAACC,GAAD,OAKf,aAJA,CAIA,gBACGA,EAAMC,SAASC,KAAI,SAAAC,GAAO,OAAI,cAAC,EAAD,eAAUA,UAIvCC,E,4JACJ,WAEE,IAAMD,EAAUE,KAAKL,MAErB,OACE,sBAAKM,UAAU,iBAAf,UACI,qBAAKC,IAAKJ,EAAQK,KAAMC,IAAKN,EAAQO,aACrC,sBAAKJ,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBH,EAAQK,OAC/B,qBAAKF,UAAU,UAAf,SAA0BH,EAAQQ,oB,GAV3BC,IAAMC,WAiBnBC,E,4MACJC,MAAQ,CACNC,SAAU,I,EAGZC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAME,iBADO,kBAGYC,IAAMC,IAAN,uCAA0C,EAAKP,MAAMC,WAHjE,OAGLO,EAHK,OAIX,EAAKvB,MAAMwB,SAASD,EAASE,MAC7B,EAAKC,SAAS,CAACV,SAAU,KALd,gDAQTW,QAAQC,IAAR,MARS,yD,kGAaf,WAAU,IAAD,OACP,OACE,uBAAMJ,SAAUnB,KAAKY,aAArB,UACE,uBACEY,KAAK,OACLC,MAAOzB,KAAKU,MAAMC,SAClBe,SAAU,SAAAb,GAAK,OAAI,EAAKQ,SAAS,CAACV,SAAUE,EAAMc,OAAOF,SACzDG,YAAY,yBACZC,UAAQ,IAEV,qD,GA5BWtB,IAAMC,WA2DVsB,E,kDAzBb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAORoC,cAAgB,SAACC,GACf,EAAKX,UAAS,SAAAY,GAAS,MAAK,CAC1BrC,SAAS,GAAD,mBAAMqC,EAAUrC,UAAhB,CAA0BoC,SAPpC,EAAKtB,MAAQ,CACXd,SAAU,IAJK,E,0CAcnB,WACE,OACE,gCACE,qBAAKK,UAAU,SAAf,SAAyBD,KAAKL,MAAMuC,QACpC,cAAC,EAAD,CAAMf,SAAUnB,KAAK+B,gBACrB,cAAC,EAAD,CAAUnC,SAAUI,KAAKU,MAAMd,kB,GApBrBW,IAAMC,WCpDT2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKZ,MAAM,uBAEba,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.00f0b0d9.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst CardList = (props) => (\n  /**This takes an array of objects (people and their data) and maps out the data into a new \n   * array called profile. This is then used to fill Card components with the profile data\n   * until every item in the array has had a component generated for it.\n   */\n  <div>\n    {props.profiles.map(profile => <Card {...profile}/>)}\n  </div>\n)\n\nclass Card extends React.Component{\n  render() {\n\n    const profile = this.props;\n\n    return (\n      <div className=\"github-profile\">\n          <img alt={profile.name} src={profile.avatar_url} />\n          <div className=\"info\">\n            <div className=\"name\">{profile.name}</div>\n            <div className=\"company\">{profile.company}</div>\n          </div>\n      </div>\n    )\n  }\n}\n\nclass Form extends React.Component {\n  state = {\n    userName: \"\",\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await axios.get(`https://api.github.com/users/${this.state.userName}`);\n      this.props.onSubmit(response.data);\n      this.setState({userName: ''})\n    }\n    catch (error){\n        console.log(error);\n    }\n    \n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input \n          type=\"text\" \n          value={this.state.userName} \n          onChange={event => this.setState({userName: event.target.value})} \n          placeholder=\"GitHub Username please\" \n          required\n        />\n        <button>Add Card</button>\n      </form>\n    )\n  }\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      profiles: [],\n    };\n  }\n\n  addNewProfile = (profileData) => {\n    this.setState(prevState => ({\n      profiles: [...prevState.profiles, profileData]\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">{this.props.title}</div>\n        <Form onSubmit={this.addNewProfile}/>\n        <CardList profiles={this.state.profiles}/>\n      </div>\n    ) \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"GitHub Cards App\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}